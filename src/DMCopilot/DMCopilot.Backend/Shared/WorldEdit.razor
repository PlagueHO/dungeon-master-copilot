@using DMCopilot.Shared.Services
@using DMCopilot.Shared.Data
@using DMCopilot.Shared.Models

@inject ISemanticKernelService semanticKernelService
@inject IWorldRepository worldRepository
@inject NavigationManager navigationManager

<Card Background="Background.Info" WhiteText>
    <CardBody>
        <CardTitle Size="3">
            Generate a World
        </CardTitle>
        <CardText>
            Enter a few details about the world you would like to generate. You can be as specific as you like, or leave it to chance.
        </CardText>
        <Field>
            <FieldBody>
                <MemoEdit @bind-Text="@WorldDetails" AutoSize />
            </FieldBody>
        </Field>
        <Button @onclick="CreateWorld" Color="Color.Primary" Margin="Margin.Is2.FromTop" Disabled="@(loadingVisible)">
            Generate <Icon Name="IconName.ArrowRight" />
        </Button>
    </CardBody>
</Card>

@if (World != null)
{
    <LoadingIndicator @bind-Visible="@loadingVisible">
        <Card>
            <CardBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <FieldBody>
                        <TextEdit @bind-Text="@World.Name" />
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Description</FieldLabel>
                    <FieldBody>
                        <MemoEdit @bind-Text="@World.Description" AutoSize />
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>History</FieldLabel>
                    <FieldBody>
                        <MemoEdit @bind-Text="@World.History" AutoSize />
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Geography</FieldLabel>
                    <FieldBody>
                        <MemoEdit @bind-Text="@World.Geography" AutoSize />
                    </FieldBody>
                </Field>
            </CardBody>
        </Card>
    </LoadingIndicator>
}

@code {
    [CascadingParameter]
    public Account? Account { get; set; }

    [CascadingParameter]
    public Tenant? Tenant { get; set; }

    [Parameter]
    public Guid WorldId { get; set; }

    World? World;
    String WorldDetails { get; set; } = "A fantasy realm called on a world called Toril with a range of climates and environments with a long rich history.";
    Boolean loadingVisible { get; set; } = false;

    protected override async void OnParametersSet()
    {
        if (Tenant != null && Account != null)
        {
            if (navigationManager.Uri.EndsWith("/world/new"))
                World = new World(Guid.NewGuid(), Tenant.Id, "New World", "A new world!");
            else if (WorldId != null)
                World = await worldRepository.GetWorldAsync(WorldId, Tenant.Id);  
        }
    }

    private async Task CreateWorld()
    {
        loadingVisible = true;

        var result = await semanticKernelService.InvokePluginFunctionAsync("World", "CreateWorld", new Dictionary<String, String> {
            {"input", WorldDetails}
        });

        // Use the result in some way
        Console.WriteLine(result);

        loadingVisible = false;
    }
}
