@using DMCopilot.Shared.Services
@using DMCopilot.Shared.Data
@using DMCopilot.Shared.Models

@inject IWorldRepository worldRepository
@inject NavigationManager navigationManager

<Card Background="Background.Primary" WhiteText>
    <CardBody>
        <CardTitle Size="3">
            Your Worlds
        </CardTitle>
        <CardText>
            Select one of the existing worlds or create a new one by clicking Create. Generating a new world can take a few seconds and requires just a few words of input.
        </CardText>
        <CardActions>
            <Button Color="Color.Dark" Type="ButtonType.Link" To="world/new" Margin="Margin.Is2.FromTop">
                Create <Icon Name="IconName.Add" />
            </Button>
            <Button Color="Color.Dark" Type="ButtonType.Link" To="world/new" Margin="Margin.Is2.FromTop">
                Delete Selected <Icon Name="IconName.Delete" />
            </Button>
        </CardActions>
    </CardBody>
</Card>

<LoadingIndicator @bind-Visible="@loadingVisible">
    <Table Striped Hoverable Bordered>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Select</TableHeaderCell>
                <TableHeaderCell>Name</TableHeaderCell>
                <TableHeaderCell>Description</TableHeaderCell>
                <TableHeaderCell>History</TableHeaderCell>
            </TableRow>
        </TableHeader>
        @if (worlds != null)
        {
            <TableBody>
                @foreach (var world in worlds)
                {
                    <TableRow @key="@world.Id">
                        <TableRowHeader><Check TValue="bool"/></TableRowHeader>
                        <TableRowCell>@world.Name</TableRowCell>
                        <TableRowCell>@world.Description</TableRowCell>
                        <TableRowCell>@world.History</TableRowCell>
                    </TableRow>
                }
            </TableBody>
        }
    </Table>
</LoadingIndicator>

@code {
    [CascadingParameter]
    public Account? Account { get; set; }

    [CascadingParameter]
    public Tenant? Tenant { get; set; }

    private bool loadingVisible = true;
    private IEnumerable<World> worlds { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await GetWorlds();
    }

    private async Task GetWorlds()
    {
        if (Tenant != null)
        {
            worlds = await worldRepository.GetWorldsByTenantAsync(Tenant.Id);
            loadingVisible = false;
        }
    }
}
