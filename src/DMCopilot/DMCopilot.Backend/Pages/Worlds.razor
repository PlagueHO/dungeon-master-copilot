@page "/worlds"

@using DMCopilot.Shared.Services
@using DMCopilot.Shared.Data
@using DMCopilot.Shared.Models

@inject ISemanticKernelService semanticKernelService
@inject IWorldRepository worldRepository
@inject NavigationManager navigationManager

<h4>Worlds</h4>

<Table FixedHeader FixedHeaderTableHeight="300px">
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Name</TableHeaderCell>
            <TableHeaderCell>Description</TableHeaderCell>
            <TableHeaderCell>History</TableHeaderCell>
            <TableHeaderCell>Geography</TableHeaderCell>
            <TableHeaderCell>Generation Method</TableHeaderCell>
        </TableRow>
    </TableHeader>
    @if (worlds != null)
    {
        <TableBody>
            @foreach (var world in worlds)
            {
                <TableRow @key="@world.Id">
                    <TableRowHeader>@world.Name</TableRowHeader>
                    <TableRowCell>@world.Description</TableRowCell>
                    <TableRowCell>@world.History</TableRowCell>
                    <TableRowCell>@world.Geography</TableRowCell>
                    <TableRowCell>@world.GeneratedContent.Method</TableRowCell>
                </TableRow>
            }
        </TableBody>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
</Table>

@code {
    [CascadingParameter]
    public Account? Account { get; set; }

    [CascadingParameter]
    public Tenant? Tenant { get; set; }

    private IEnumerable<World>? worlds;

    protected override async Task OnParametersSetAsync()
    {
        await GetWorlds();
    }

    private async Task GetWorlds()
    {
        if (Account != null)
        {
            this.worlds = await worldRepository.GetWorldsByTenantAsync(Account.ActiveTenantId);
        }
    }
}
